# -*- coding: utf-8 -*-
"""saiprakash

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jiQL99jHWRLESp0NC37Pnm8Y-HydteBv

## Communicate Data Findings

This project is divided into two major parts.

- In the first part, you will conduct an **exploratory data analysis** on a dataset of your choosing.
- In the second part, you will take your main findings from your exploration and convey them to others through an **explanatory analysis**.


I will perform an exploratory analysis on data provided by **Ford GoBike**,
a bike-share system provider.

     Dataset :https://www.fordgobike.com/system-data
              https://s3.amazonaws.com/baywheels-data/index.html
              i.e.  201801-fordgobike-tripdata.csv.zip
              
              Dataset Contain: 239111 Rows & 14 Columns
                i.e     duration_sec               
                        start_time                
                        end_time                   
                        start_station_id           
                        start_station_name         
                        start_station_latitude     
                        start_station_longitude    
                        end_station_id             
                        end_station_name           
                        end_station_latitude       
                        end_station_longitude      
                        bike_id                    
                        user_type                 
                        bike_share_for_all_trip

# **Project Name**    - Ford go bike sharing project

##### **Project Type**    - EDA
##### **Contribution**    - Individual
Name=saiprakash

# **Project Summary -**

This project looks at how people use the Ford GoBike bike-sharing system in the San Francisco Bay Area, using data from January 2018. The dataset has over 239,000 bike trips, and the goal is to find patterns in how long rides last, when people ride the most, and how different types of users — Subscribers and Customers — behave.

Using Python tools like Pandas, Matplotlib, and Seaborn, I cleaned up the data and explored it through charts and stats. The idea is to better understand how the bike system is used, which can help improve service, plan better routes, and make smarter decisions for the future.

# **GitHub Link -**

# **Problem Statement**
Bike-sharing systems are rapidly growing in popularity, yet understanding user behavior is essential to improve their efficiency and accessibility.
"""

# Commented out IPython magic to ensure Python compatibility.
#import important packagesabs
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import seaborn as sns

import warnings
warnings.filterwarnings('ignore')



"""## Exploratory data Analysis

**Table of Contents:**

    1) Introduction
    2) Data Wrangling for Exploration
    3) Univariate Exploration
    4) Bivariate Explorationn
    5) Multivariate Exploration
    6) Summary
"""

file_path = '/content/201801-fordgobike-tripdata.csv.zip'  # Change this if the file is elsewhere

file_path = 'C:/Users/YourUserName/Downloads/201801-fordgobike-tripdata.csv.zip'

!wget https://s3.amazonaws.com/baywheels-data/201801-fordgobike-tripdata.csv.zip

file_path = '/content/201801-fordgobike-tripdata.csv.zip'  # Change this if the file is elsewhere

"""### Data Wrangling for Exploration"""

# Commented out IPython magic to ensure Python compatibility.
#import important packagesabs
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

import zipfile

# Data Wrangling for Exploration
# Assuming the file is in the current working directory, or adjust the path accordingly
file_path = '201801-fordgobike-tripdata.csv.zip'  # Change this if the file is elsewhere

try:
    with zipfile.ZipFile(file_path, 'r') as zip_ref:
        # Get a list of files in the ZIP archive
        file_list = zip_ref.namelist()
        # Find the CSV file (assuming it ends with '.csv')
        csv_file = [f for f in file_list if f.endswith('.csv')][0]
        # Extract the CSV file to a temporary file
        with zip_ref.open(csv_file) as file, open('temp.csv', 'wb') as temp_file:
            temp_file.write(file.read())

    # Read the CSV data from the temporary file
    ford_df = pd.read_csv('temp.csv')
except FileNotFoundError:
    print(f"Error: File not found at '{file_path}'. Please ensure the file is in the correct location.")
    # You might want to add more error handling or exit the script here



"""#### Analyze"""

# Commented out IPython magic to ensure Python compatibility.
#import important packagesabs
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import zipfile

# Open the ZIP file
with zipfile.ZipFile('/content/201801-fordgobike-tripdata.csv.zip', 'r') as zip_ref:
    # Get a list of files in the ZIP archive
    file_list = zip_ref.namelist()
    # Find the CSV file (assuming it ends with '.csv')
    csv_file = [f for f in file_list if f.endswith('.csv')][0]
    # Extract the CSV file to a temporary file
    with zip_ref.open(csv_file) as file, open('temp.csv', 'wb') as temp_file:
        temp_file.write(file.read())

# Read the CSV data from the temporary file
ford_df = pd.read_csv('temp.csv') # Assign the dataframe to ford_df

ford_df.head() # Now ford_df is defined and can be used



#summary
ford_df.info()
ford_df.shape

ford_df.describe()

#check duplicte values
ford_df.duplicated().sum()

#check null values
ford_df.isnull().sum()

ford_df['user_type'].value_counts()

"""#### cleaning"""

ford_clean=ford_df.copy()
ford_clean.head(5)

# convert dates to timestamps
ford_clean.start_time = pd.to_datetime(ford_clean['start_time'])
ford_clean.end_time = pd.to_datetime(ford_clean['end_time'])

#change start_station_id, end_station_id, bike_id to string
ford_clean.bike_id = (ford_clean['bike_id']).astype(str)
ford_clean.start_station_id = (ford_clean['start_station_id']).astype(str)
ford_clean.end_station_id = (ford_clean['end_station_id']).astype(str)

ford_clean.user_type= (ford_clean['user_type']) .astype('category')

ford_clean.info()

#extract weekday name from start_time
ford_clean['start_time_day']=ford_clean['start_time'].dt.strftime('%a')

#extract weekday name from start_time
ford_clean['start_time_hour']=ford_clean['start_time'].dt.hour

ford_clean['duration_min']=ford_clean['duration_sec']/60

ford_clean.head(2)

ford_clean['start_time_day'].value_counts()

"""### Exploration (Visualization)"""

sns.pairplot(ford_clean, hue='user_type', height=2.5)

"""### Univariate Exploration
    1) Bikes rides on weekdays
    2) Hourly rides of the bike
    3) Trip duration (sec) histogram
    4) Distribution of User Type
"""

base_color= sns.color_palette()[0]

# Commented out IPython magic to ensure Python compatibility.
#import important packagesabs
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

# Define base_color here so it's accessible in this code block
base_color = sns.color_palette()[0]

#1) Bikes rides on weekdays
weekday=['Mon',"Tue","Wed","Thu","Fri","Sat","Sun"]

# Ensure 'start_time_day' column exists and is accessible in ford_clean
# If it's created in a different cell, re-run that cell to bring it into current scope
# Example: if you created 'start_time_day' using:
# ford_clean['start_time_day'] = ford_clean['start_time'].dt.strftime('%a')
# then ensure that line is executed before this cell.


# Convert 'start_time' and 'end_time' to datetime
ford_clean['start_time'] = pd.to_datetime(ford_clean['start_time'])
ford_clean['end_time'] = pd.to_datetime(ford_clean['end_time'])

# Now you can extract weekday name from start_time
ford_clean['start_time_day'] = ford_clean['start_time'].dt.strftime('%a')


sns.catplot(data=ford_clean, x='start_time_day', kind='count', order=weekday, color=base_color)
plt.title("Bikes rides on weekdays")

plt.xlabel("Weekdays")
plt.ylabel("No. of Bike Trips")

# 2) Hourly rides of the bike
sns.catplot(data=ford_clean, x='start_time_hour', kind='count',  color=base_color)
plt.title("Hourly rides of the Bikes")

plt.xlabel("Total Hours")
plt.ylabel("No. of Bike Trips")

#3) Trip duration (sec)
sns.distplot(ford_clean['duration_sec'])
plt.title("Trip Duration In Second")

plt.xlabel("Duration in Sec")

# 4) Distribution of user type
plt.figure(figsize=(5,5))
a=sns.catplot(data=ford_clean, x='user_type', kind='count',  color=base_color)
a.fig.suptitle("Distribution of user Type")

a.set_axis_labels("User Type", "Count of Users")

"""### Bivariate Exploration
    1) Weekly usage Trends by user type
    2) Hourly usage of the bike share system user type
    3) Bike Rides percentage by user type(Pie chart) : Source:https://pythonspot.com/matplotlib-pie-chart/
    4) Trip Duration and Start Station
    5) Trip Duration and End Station


"""

#1) #weekly usage Trends by user type
weekday = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
a=sns.catplot(data=ford_clean, x='start_time_day', hue='user_type',order=weekday, kind='count', sharey= False,color=base_color)
a.fig.suptitle('Weekly usage Trends by User Type', )

a.set_axis_labels('Weekdays',"No. of bike trips")

# Commented out IPython magic to ensure Python compatibility.
#import important packagesabs
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import zipfile

# Open the ZIP file
with zipfile.ZipFile('/content/201801-fordgobike-tripdata.csv.zip', 'r') as zip_ref:
    # Get a list of files in the ZIP archive
    file_list = zip_ref.namelist()
    # Find the CSV file (assuming it ends with '.csv')
    csv_file = [f for f in file_list if f.endswith('.csv')][0]
    # Extract the CSV file to a temporary file
    with zip_ref.open(csv_file) as file, open('temp.csv', 'wb') as temp_file:
        temp_file.write(file.read())

# Read the CSV data from the temporary file
ford_df = pd.read_csv('temp.csv') # Assign the dataframe to ford_df

# ... (Rest of your data loading and cleaning code) ...

# Convert 'start_time' to datetime
ford_clean['start_time'] = pd.to_datetime(ford_clean['start_time'])

# Extract 'start_time_hour'
ford_clean['start_time_hour'] = ford_clean['start_time'].dt.hour # This line creates the 'start_time_hour' column

# ... (Rest of your data cleaning and exploration code) ...

# Bivariate Exploration: Hourly usage Trends by user type
a = sns.catplot(data=ford_clean, x='start_time_hour', col='user_type', kind='count', sharey=False, color=base_color)
a.fig.suptitle('Hourly usage Trends by User Type')

a.set_axis_labels('Hours', "No. of bike trips")

# ... (Rest of your code) ...

# 3) Bike Rides % by user type
customer = ford_clean.query('user_type == "Customer"')['bike_id'].count()
subscriber = ford_clean.query('user_type == "Subscriber"')['bike_id'].count()

customerP= (customer/ford_clean['bike_id'].count())*100
subscriberP= (subscriber/ford_clean['bike_id'].count())*100

customer, subscriber,customerP,subscriberP

# Data to plot
labels = ['Cistomer', 'Subscriber']
sizes = [customerP,subscriberP]
colors = [ 'coral', 'lightskyblue']
explode = ( 0.2, 0)  # explode 1st slice

# Plot
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
autopct='%1.1f%%', shadow=True, startangle=140)

plt.axis('equal')
plt.show()

#Trip Duration and Start Station
plt.figure(figsize=(12,5))
sns.lineplot(y="duration_sec", x="start_station_id",data=ford_clean)

#Trip Duration and End Station
plt.figure(figsize=(12,5))
sns.lineplot(y="duration_sec", x="end_station_id",data=ford_clean)

"""#### Multivariate Exploration
    1) Create faceted scatterplot of the day and time by user type
        Source: https://seaborn.pydata.org/generated/seaborn.FacetGrid.html
    
    2) Duration of bikers acreoss day of week nd hour
        #Source : https://seaborn.pydata.org/generated/seaborn.pointplot.html
    
    3) Showing usage during the weekday for customers and subscribers(Heatmap)
        # source: https://seaborn.pydata.org/generated/seaborn.heatmap.html
"""

# Source: https://seaborn.pydata.org/generated/seaborn.FacetGrid.html
# create faceted scatterplot of the day and time by user type
g = sns.FacetGrid(ford_clean, col="user_type", height=3)
g = g.map(plt.scatter,'start_time_day', "duration_sec",color='r')

#Source : https://seaborn.pydata.org/generated/seaborn.pointplot.html
#Duration of bikers acreoss day of week nd hour
plt.figure(figsize=(15,7))
# Ensure 'duration_min' is in ford_clean
ford_clean['duration_min'] = ford_clean['duration_sec'] / 60  # Recalculate if needed

a = sns.catplot(x="start_time_hour", y="duration_min", hue='start_time_day', kind="point", data=ford_clean)

a.fig.suptitle('Duration of bikers acreoss day of week nd hour')

a.set_axis_labels('Duration in minutes', "Days")

#(Heatmap) Showing usage during the weekday for customers and subscribers
# source: https://seaborn.pydata.org/generated/seaborn.heatmap.html
plt.figure(figsize=(10,7))
plt.suptitle('Showing usage during the weekday for customers and subscribers', fontsize=14)

# Setting the weekday order
ford_clean['start_time_day'] = pd.Categorical(ford_clean['start_time_day'],
                                                categories=['Mon','Tue','Wed','Thu','Fri','Sat', 'Sun'])


# heatmap for customers
plt.subplot(1, 2, 1)
customer_df = ford_clean.query('user_type == "Customer"').groupby(["start_time_hour", "start_time_day"])["bike_id"].size().reset_index()
# Changed: Using pivot with index, columns, and values arguments
customer_df = customer_df.pivot(index="start_time_hour", columns="start_time_day", values="bike_id")
sns.heatmap(customer_df, cmap="YlGnBu")


# heatmap for subscribers
plt.subplot(1, 2, 2)
subscriber_df = ford_clean.query('user_type == "Subscriber"').groupby(["start_time_hour", "start_time_day"])["bike_id"].size().reset_index()
# Changed: Using pivot with index, columns, and values arguments
subscriber_df = subscriber_df.pivot(index="start_time_hour", columns="start_time_day", values="bike_id")
sns.heatmap(subscriber_df, cmap="YlGnBu")

"""# **Conclusion**

The data shows strong evidence that Subscribers drive the majority of Ford GoBike’s weekday usage, following a commuter-like pattern. Customers, on the other hand, use the service more during leisure hours and weekends. This insight can help the company:

Optimize bike allocation and maintenance schedules.

Tailor marketing strategies for both user types.

Improve availability during peak times in busy locations.

Further analysis across multiple months or with weather/infrastructure data could help refine these insights.
"""